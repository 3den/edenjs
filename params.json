{"name":"Spicejs","tagline":"A minimal lib for creating MVC applications with javascript","body":"# What is Spice.js?\r\n\r\nSpice is a super minimal (< 3k) and flexible MVC framework for javascript. Spice was built to be easily added to any existent application and play well with other technologies such as jQuery, pjax, turbolinks, node or whatever else you are using.\r\n\r\n## Why yet an other MVC framework?\r\n\r\nCurrently all major MVC frameworks for javascript have a huge API and you end up writing more code to satisfy the the framework requirements than your own business logic, that leads to code that is tightly coupled to the framework and hard to reuse, sometimes even hard to update for new versions of the framework.\r\n\r\nOn Spice most of the code you write is pure javascript the framework API is minimal (just 5 methods) that helps you to make your code easier to reuse and test. The core of Spice is pure javascript (without any external dependency) that is fully unit tested and can be easily extended.\r\n\r\nSpice.js was inspired by [the SOLID Principles](http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)), [jQuery](http://jquery.com/) and [Riot.js](https://github.com/muut/riotjs).\r\n\r\n### The Good\r\n\r\n* **Easy to learn**: Spice will few very straight forward for developers are familiar with jQuery and JavaScript.\r\n* **Unobtrusive JavaScript**: Spice makes [progressive enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement) simpler, you can load your views on the server and use Spice's controllers to add frontend features.\r\n* **Powerful template engine**: Spice comes with `S.template` which creates a precompiled template that is supper fast, you can also write any javascript code in your template without having to learn different syntaxes.\r\n* **Routes**: You can use routes to bind controllers and plugins, on pages where they are needed and you can have more than one route callback matching the same path.\r\n* **Observables**: You can turn any javascript object, or function, into an observable that can listen and trigger events.\r\n* **Supper Flexible**: You can use any javascript lib or jQuery plugin with spice, there is extensions for jQuery controllers, turbolinks and it is easy to write other extensions for the features you need.\r\n* **Write once use everywhere**: Spice promotes reuse, it is easy to create generic controlers and models that can be reused in diferent parts of the same app or on diferent apps.\r\n* **Testable**: Is very simple to test spice code, controllers are just a function, templates are just a string and observables are just objects. Spice also comes out of the box with a simple BDD framework.\r\n\r\n### The Bad\r\n\r\n* **To Flexible**: There is no restriction on your code structure so you can make a very good architecture with Spice or a very bad one.\r\n* **To Young**: It is a new project so there is not much documentation yet.\r\n\r\n### The Ugly\r\n\r\n* **Using with other MVC Frameworks**: It is possible to use Spice with other javascript frameworks but that is not recommended since it could lead to a confusing code.\r\n\r\n\r\n# Install\r\n\r\nThe best way to install `Spice.js`, and most js packages, is using bower:\r\n\r\n```\r\n$ bower install spicejs\r\n```\r\n\r\nBy default bower will install packages in `./bower_components` so you can add spice and the extensions you need using:\r\n\r\n```html\r\n<script src=\"bower_components/spicejs/min.js\"></script>\r\n<!-- or \"bower_components/spicejs/index.js\" for the uncompressed version -->\r\n\r\n<!-- Polyfill extension for compatibility with older browsers (IE 7) -->\r\n<script src=\"bower_components/spicejs/ext/polyfill.js\"></script>\r\n\r\n<!-- Route extension for browser navigation and push state -->\r\n<script src=\"bower_components/spicejs/ext/route_browser.js\"></script>\r\n\r\n<!-- Add other extensions as needed... -->\r\n```\r\n\r\nIf you don't want to use bower you can just copy the files you need from https://github.com/3den/spicejs.\r\n\r\n## Spice on Node.js\r\n\r\nYou can use Spice.js on node, to include spice do:\r\n\r\n```js\r\nvar S = require(\"./bower_components/spicejs\");\r\n\r\n// now you can user spice on the backend\r\n```\r\n\r\n# S.observable(object)\r\n\r\nThis method turns any object or function into an `observable` by adding some methods for dealing with events properties and inheritance. The `observable` can be considered the M (Model) of MVC, if is deals with data and business logic.\r\n\r\n\r\n\r\n```js\r\n// Example of a a Search model\r\nvar Search = S.observable({\r\n  query: undefined,\r\n  page: 1,\r\n\r\n  search: function(path, query) {\r\n    var self = this;\r\n\r\n    $.get(path, {\r\n      format: \"json\",\r\n      search: query\r\n    }).done(function(data) {\r\n      self.query = query;\r\n      self.page = 1;\r\n\r\n      // Triggers an event on the Search object.\r\n      self.trigger(\"search\", data, query);\r\n    });\r\n  }\r\n});\r\n```\r\nCheck the [unit tests](https://github.com/3den/spicejs/blob/master/test/lib/observable_test.js) for `S.observable`.\r\n\r\n## observable.on(event, callback)\r\n\r\nObservables can listen to events using the the `on` callback.\r\n\r\n```js\r\nSearch.on(\"search\", function(data, query) {\r\n  console.log(data); // prints the data returned by the search\r\n  console.log(data); // prints the query used to search\r\n});\r\n```\r\n\r\n## observable.one(event, callback)\r\n\r\nDoes the same as `on` but the callback is altomatically removed after it is called the first time.\r\n\r\n## observable.off(event, callback)\r\n\r\nAllows you to remove event listeners.\r\n\r\n```js\r\n// Removes all callbacks\r\nSearch.off();\r\n\r\n// Removes the 'search' callbacks\r\nSearch.off(\"search\");\r\n\r\n// Removes just the `someCallback` function 'search' callbacks\r\nSearch.off(\"search\", someCallback);\r\n```\r\n\r\n## observable.trigger(event, arg1, arg2...)\r\n\r\nTriggers an event, the arguments are passed to the callback lisetener.\r\n\r\n```js\r\nvar data = [{id: 1, name: \"Borderlands\"}, {id: 2, name: \"Doom 3\"}]\r\n  , query = \"games\";\r\n\r\n// This will call all callbacks attached to the \"search\" event\r\n// passing `data` and `query` as the arguments.\r\nSearch.trigger(\"search\", data, query);\r\n```\r\n\r\n## observable.set(key, value)\r\n\r\nSets the value of a property and triggers the events \"set\" and `key`, passing\r\n\r\n```js\r\nvar Order = S.observable({\r\n  subtotal: 0,\r\n  total: 0,\r\n  shipping: 0\r\n}).on(\"subtotal shipping\", function(value, oldValue) {\r\n  console.log(\"changed from \" + oldValue + \" to \" + value);\r\n  this.set(\"total\", this.subtotal + this.shipping);\r\n}).on(\"set\", function(attr, value, oldValue) {\r\n  console.log(attr + \" changed from \" + oldValue + \" to \" + value);\r\n});\r\n\r\n// Updates the subtotal to 10,\r\n// the total will be altomatically set to 10\r\nOrder.set(\"subtotal\", 10);\r\n\r\n// Updates the shipping to 2.50,\r\n// the total will be altomatically set to 12.50\r\nOrder.set(\"shipping\", 10);\r\n```\r\n\r\n## observable.get(key)\r\n\r\nReturns the value of a property.\r\n\r\n```js\r\nOrder.total === Order.get('total');\r\n```\r\n\r\n## observable.create(properties)\r\n\r\nCreates a new object based on the observable, Spice uses prototypal inheritance do changes made on the parrent object are inherited on the new one but changes on the child don't mess up with the parrent.\r\n\r\n```js\r\nvar TaxableOrder = Order.create({\r\n  tax: 0\r\n\r\n}).off(\r\n  // Removes the subtotal and shipping callbacks\r\n  \"subtotal shipping\"\r\n\r\n).on(\"subtotal shipping tax\", function() {\r\n  // Adds the new callback\r\n  this.set(\"total\", this.subtotal + this.shipping + this.tax);\r\n\r\n});\r\n\r\n// Setting the tax updates the total\r\nTaxableOrder.set(\"tax\", 1)\r\nTaxableOrder.total === Order.total + 1\r\n\r\n// Overriding a property dont touch the parent\r\nTaxableOrder.set(\"subtotal\", 5)\r\nTaxableOrder.subtotal !== Order.subtotal\r\n```\r\n\r\n\r\n# S.template(text [, object])\r\n\r\n\r\n# S.controller(name, callback)\r\n\r\n\r\n## S.control(name, element [, options])\r\n\r\n\r\n# S.route\r\n\r\nThe `S.route` method can do diverent things depending on what arguments are passed (following the jQuery sytle). The route matcher can have params `/search?q={query}` and wildcards `/users*`, and it is possible to have many one callbacks trigered for a given path.\r\n\r\nRoutes should be used to bind controllers, plugins or to trigger actions on a model. This will help to keep you code well organized and respond correctly to changes on the page.\r\n\r\nCheck the [unit tests](https://github.com/3den/spicejs/blob/master/test/lib/route_test.js) for `S.route`.\r\n\r\n## S.route(callback)\r\n\r\nThis defines a generic route that will be called for all paths. This is usefull for binding plugins that will be used on all pages.\r\n\r\n```js\r\nS.route(function(params) {\r\n  // binds select2 plugin to all `select` tags\r\n  // http://ivaynberg.github.io/select2/\r\n  $(\"select\").select();\r\n\r\n  // prints the path of the current page.\r\n  console.log(params.path);\r\n});\r\n```\r\n\r\n## S.route(path, callback)\r\n\r\nThe given `callback` will be called for all routes that match the given `path` expression.\r\n\r\n```js\r\n\r\n```\r\n\r\n## S.route(object)\r\n\r\nThis sintax alows to set many route callbacks at once.\r\n\r\n```js\r\n// This code will do exactly the same as the previous example.\r\nS.route({\r\n  \"/search*\": function(params) {\r\n    S.controll('search', document.getElementById(\"search-field\"), {\r\n      target: document.getElementById(\"search-results\"),\r\n      model: Search\r\n    });\r\n  },\r\n\r\n  \"/search?q={query}\": function(params) {\r\n    Search.search(params.path, params.query);\r\n  }\r\n});\r\n```\r\n\r\n## S.route(path [, triggersVisit = true])\r\n\r\nTriggers all callbacks that match the given path, if `triggersVisit` is set to `false` it will NOT send a push state to update the browser.\r\n\r\n```js\r\n// Triggers all callbacks that match \"/somepath\"\r\n// and also calls `route.trigger(\"visit\", \"/somepath\")`\r\n// that will send a push state to the browser updating\r\n// the url if `ext/route_browser.js` was included.\r\nS.route(\"/somepath\");\r\n\r\n// Triggers all callbacks that match \"/somepath\"\r\n// but do NOT call `route.trigger(\"visit\", \"/somepath\")`\r\n// so the browser URL wont change\r\nS.route(\"/somepath\", false);\r\n```\r\n\r\n## S.route.update(path [, callsVisit = true])\r\n\r\nUpdates a portion the current current url and calls all callbacks that match the new path, if callsVisit is set to `false` it will update the URL without triggering the callbacks.\r\n\r\n```js\r\n// visits the \"/search\" and triggers all callbacks that match that route.\r\nS.route(\"/search\");\r\n\r\n// Updates the current path to \"/search?q=spice\"\r\n// and triggers all callbacks for visiting that route.\r\nS.route.update(\"?q=spice\");\r\n\r\n// Updates the current path to \"/search?q=spice#doc\"\r\n// WITHOUT triggering the callbacks for visinting that route\r\nS.route.update(\"#doc\", false);\r\n```\r\n\r\n# Extensions\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}